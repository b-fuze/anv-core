// Add cancelation to promises

export class PromiseProxyType<T = any> extends Promise<T> {
  CANCEL_TOKEN: {};
  static CANCEL_TOKEN: {};
  persistentThen: Promise<T>["then"];
}

const PromiseProxy: typeof PromiseProxyType = <any>Promise;

PromiseProxy.prototype.CANCEL_TOKEN = {};
PromiseProxy.CANCEL_TOKEN = PromiseProxy.prototype.CANCEL_TOKEN;
PromiseProxy.prototype.persistentThen = Promise.prototype.then;
PromiseProxy.prototype.then = function<TResult1 = any, TResult2 = any>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1>, onrejected?: (value: any) => TResult2 | PromiseLike<TResult2>) {
  let promiseResolve: (value: any) => any = null;
  let promiseReject: (reason: any) => any = null;
  
  this.persistentThen(function(value: any) {
    if (value !== PromiseProxy.CANCEL_TOKEN) {
      if (typeof onfulfilled === "function") {
        promiseResolve(onfulfilled(value));
      } else {
        promiseResolve(value);
      }
    } else {
      // FIXME: Nothing is done here...
    }
  }, function(reason: any) {
    if (typeof onrejected === "function") {
      promiseReject(onrejected(reason));
    } else {
      promiseReject(reason);
    }
  });
  
  return new Promise<TResult1 | TResult2>(function(resolve, reject) {
    promiseResolve = resolve;
    promiseReject = reject;
  });
}

Promise.prototype.catch;

// Mark this as a module
export const stub = PromiseProxy;
