"use strict";
// Add cancelation to promises
Object.defineProperty(exports, "__esModule", { value: true });
class PromiseProxyType extends Promise {
}
exports.PromiseProxyType = PromiseProxyType;
const PromiseProxy = Promise;
PromiseProxy.prototype.CANCEL_TOKEN = {};
PromiseProxy.CANCEL_TOKEN = PromiseProxy.prototype.CANCEL_TOKEN;
PromiseProxy.prototype.persistentThen = Promise.prototype.then;
PromiseProxy.prototype.then = function (onfulfilled, onrejected) {
    let promiseResolve = null;
    let promiseReject = null;
    this.persistentThen(function (value) {
        if (value !== PromiseProxy.CANCEL_TOKEN) {
            if (typeof onfulfilled === "function") {
                promiseResolve(onfulfilled(value));
            }
            else {
                promiseResolve(value);
            }
        }
        else {
            // FIXME: Nothing is done here...
        }
    }, function (reason) {
        if (typeof onrejected === "function") {
            promiseReject(onrejected(reason));
        }
        else {
            promiseReject(reason);
        }
    });
    return new Promise(function (resolve, reject) {
        promiseResolve = resolve;
        promiseReject = reject;
    });
};
Promise.prototype.catch;
// Mark this as a module
exports.stub = PromiseProxy;
