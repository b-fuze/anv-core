let anvInstance: any = null;
export function setInstance(instance: any) {
  if (!anvInstance) {
    anvInstance = instance;
  }
}

interface BaseFacet {
  facetId?: string;
};

export interface ProviderFacet extends BaseFacet {
  name: string;
  displayName?: string;
  description?: string;
  weight?: number;
  cacheSource?: boolean;
  delay?: number | ((ctx: {}, done: () => void) => void);
  resolvers: {
    mediaList?: string;
    mediaSource?: string;
  };
  hosts: string[];
  validUrl(url: string, list: boolean): boolean;
  tiers?: {
    [tier: string]: string;
  };
  mediaList(metaMediaList: any): string[];
  mediaSource?(metaMediaSource: any, direct: boolean): {
    [sourceIndex: number]: [string, string, string] | [string, string, string, string];
  };
  search?(query: string): string[];
}

export interface MirrorFacet extends BaseFacet {
  name: string;
  displayName?: string;
  description?: string;
  weight?: number;
  cache?: boolean;
  delay?: number | ((ctx: {}, done: () => void) => void);
  resolver: string;
  tiers?: {
    [tier: string]: string;
  };
  media(metaMediaPage: string, tier: string): string;
}

export interface GenericResolverFacet extends BaseFacet {
  name: string;
  description?: string;
  weight?: number;
  resolve(url: string, done: (err: string, resource: any) => void): void;
}

export interface StreamResolverFacet extends BaseFacet {
  name: string;
  description?: string;
  weight?: number;
  external?: boolean;
  resolve(url: string, out: string | NodeJS.WritableStream, info?: (data: {size: number; bytes: number}) => void): {
    stop(): void;
  }
}

export type RegisterFuncFacets = "provider" | "mirror" | "genericresolver" | "streamresolver";

// FIXME: Refine these types
export interface RegisterFacetTypeMap {
  provider: ProviderFacet;
  mirror: MirrorFacet;
  genericresolver: GenericResolverFacet;
  streamresolver: StreamResolverFacet;
}

export function register<facet extends keyof RegisterFacetTypeMap>(facet: facet, facetOptions: RegisterFacetTypeMap[facet]): void {
  anvInstance.register(facet, facetOptions);
}

export function genericResolver(name: string, url: string, done: (data: any) => void) {
  anvInstance.genericResolver(name, url, done);
}
